(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{597:function(t,s,a){"use strict";a.r(s);var n=a(5),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("什么是线性表？")]),t._v(" "),a("p",[t._v("==由同类型数据元素构成有序序列的线性结构==")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.itdu.tech/image/image-20210418224522556.png",alt:"image-20210418224522556"}})]),t._v(" "),a("ul",[a("li",[t._v("表中元素个数称为线性表的"),a("strong",[t._v("长度")])]),t._v(" "),a("li",[t._v("线性表没有元素时，成为"),a("strong",[t._v("空表")])]),t._v(" "),a("li",[t._v("表起始位置称"),a("strong",[t._v("表头")]),t._v("，表结束位置称"),a("strong",[t._v("表尾")])])]),t._v(" "),a("p",[t._v("类型名称：线性表(List)")]),t._v(" "),a("p",[t._v("数据对象集：线性表是n(≥0)个元素构成的有序序列(a~1~，a~2~，......，a~n~)")]),t._v(" "),a("p",[t._v("操作集：线性表L∈List，整数i表示位置，元素X∈ElementType，线性表基本操作主要有：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.itdu.tech/image/image-20201209160216218.png",alt:"image-20201209160216218"}})]),t._v(" "),a("h4",{attrs:{id:"单链表-linklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单链表-linklist"}},[t._v("#")]),t._v(" 单链表(LinkList)")]),t._v(" "),a("p",[t._v("链表以节点为单位，每个元素都是一个独立对象，在内存空间的存储是非连续的。链表的节点对象具有两个成员变量：「值 "),a("code",[t._v("val")]),t._v("」，「后继节点引用 "),a("code",[t._v("next")]),t._v("」")]),t._v(" "),a("p",[t._v("元素无需按顺序排列，只要上一个元素指向下一个元素即可")]),t._v(" "),a("p",[t._v("创建链表：每一个链表的空间和位置是不需要预先分配划定的，可以根据系统的情况和实际的需求即时生成。")]),t._v(" "),a("blockquote",[a("p",[t._v("单链表结构与顺序存储结构的优缺点：")]),t._v(" "),a("ol",[a("li",[t._v("存储分配方式：\n"),a("ul",[a("li",[t._v("顺序存储结构用一段连续存储单元依次存储线性表的数据元素")]),t._v(" "),a("li",[t._v("单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素")])])]),t._v(" "),a("li",[t._v("时间性能：\n"),a("ul",[a("li",[t._v("查找\n"),a("ul",[a("li",[t._v("顺序存储结构O(1)")]),t._v(" "),a("li",[t._v("单链表O(n)")])])]),t._v(" "),a("li",[t._v("插入和删除\n"),a("ul",[a("li",[t._v("顺序存储结构需要平均移动表长一半的元素，时间复杂度为O(n)")]),t._v(" "),a("li",[t._v("单链表在找出位置的指针后，插入和删除时间复杂度仅为O(1)")])])])])]),t._v(" "),a("li",[t._v("空间性能：\n"),a("ul",[a("li",[t._v("顺序存储结构需要预分配存储空间，分大了，浪费；分小了，易发生上溢")]),t._v(" "),a("li",[t._v("单链表不需要分配存储空间，只要有就可以分配，元素个数不受限制")])])])]),t._v(" "),a("p",[t._v("==若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构，反正使用单链表结构==")]),t._v(" "),a("p",[t._v("==当线性表中的元素个数变化较大或者根本不知道有多大时，最好用单链表结构。==")])]),t._v(" "),a("h4",{attrs:{id:"静态链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态链表"}},[t._v("#")]),t._v(" 静态链表")]),t._v(" "),a("p",[t._v("==用数组描述的链表叫做静态链表==，数组的每个下标都对应一个data和cur，数据域data用来存放数据元素，游标cur用来指向该元素的后继(类似单链表中的next指针)")]),t._v(" "),a("p",[t._v("静态链表创建")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("MAXSIZE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存储空间的初始分配量 */")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 线性表的静态链表存储结构 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Elemtype data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 游标(cursor)，为0表示无指向 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Component"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("StaticLinkList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("==第一个跟最后一个元素不存数据==")]),t._v(" "),a("p",[t._v("第一个cur存储空闲空间第一个结点的下标，最后一个cur存储第一个元素的下标")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.itdu.tech/image/image-20210418220357626.png",alt:"image-20210418220357626"}})]),t._v(" "),a("p",[t._v("第一个cur指向备用链表的第一个结点，最后一个cur指向第一个数据")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.itdu.tech/image/image-20210418220439032.png",alt:"image-20210418220439032"}})]),t._v(" "),a("blockquote",[a("p",[t._v("优点：")]),t._v(" "),a("p",[t._v("​\t在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中插入和删除操作需要移动大量元素的缺点。")]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("p",[t._v("​\t没有解决连续存储分配带来的表长难以确定的问题，失去了链式存储结构随机存取的特性")])]),t._v(" "),a("h4",{attrs:{id:"循环链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[t._v("#")]),t._v(" 循环链表")]),t._v(" "),a("p",[t._v("==将单链表中终端节点的指针指向头结点，形成一个环，这就是循环链表==")]),t._v(" "),a("h4",{attrs:{id:"双向链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),a("p",[t._v("==在单链表的每个节点中在设置一个前驱指针==，两个指针一个指向后继节点，一个指向前驱节点")])])}),[],!1,null,null,null);s.default=v.exports}}]);