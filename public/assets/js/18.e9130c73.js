(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{585:function(n,t,e){"use strict";e.r(t);var v=e(5),_=Object(v.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("blockquote",[e("p",[n._v("一个好的算法，满足以下两点")])]),n._v(" "),e("p",[n._v("空间复杂度S(n)——算法写成的程序在执行时占用存储单元的长度。")]),n._v(" "),e("p",[n._v("时间复杂度T(n)——算法写成的程序在执行时耗费时间的长度。")]),n._v(" "),e("blockquote",[e("p",[n._v("算法复杂度的渐进表示法")])]),n._v(" "),e("p",[n._v("T(n)=O(f(n))表示存在常数C>0，n~0~>0使得当n≥n~0~时有T(n)≤C·f(n)")]),n._v(" "),e("p",[n._v("T(n)=Ω(g(n))表示存在常熟C>0，n~0~>0使得当n≥n~0~时有T(n)≥C·g(n)")]),n._v(" "),e("p",[n._v("T(n)=θ(h(n))表示同时有T(n)=O(h(n))和T(n)=Ω(h(n))")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.itdu.tech/image/image-20201207110034898.png",alt:"image-20201207110034898"}})]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.itdu.tech/image/image-20201207110228918.png",alt:"image-20201207110228918"}})]),n._v(" "),e("p",[e("img",{attrs:{src:"https://www.itdu.tech/image/image-20201207110457415.png",alt:"image-20201207110457415"}})]),n._v(" "),e("blockquote",[e("p",[n._v("复杂度分析小技巧")])]),n._v(" "),e("p",[n._v("若两段算法分别有复杂度T~1~(n)=O(f~1~(n))和T~2~(n)=O(f~2~(n))，则")]),n._v(" "),e("ul",[e("li",[n._v("T~1~(n)+T~2~(n)=max(O(f~1~(n))，O(f~2~(n)))")]),n._v(" "),e("li",[n._v("T~1~(n)×T~2~(n)=O(f~1~(n)×f~2~(n))")])]),n._v(" "),e("p",[n._v("若T(n)是关于n的k阶多项式，那么T(n)=θ(n^k^)")]),n._v(" "),e("p",[n._v("一个==for==循环的时间复杂度等于循环次数乘以循环体代码的复杂度")]),n._v(" "),e("p",[n._v("==if-else==结构的复杂度取决于==if==的条件判断复杂度和两个分枝部分的复杂度，总体复杂度取三者中最大")])])}),[],!1,null,null,null);t.default=_.exports}}]);