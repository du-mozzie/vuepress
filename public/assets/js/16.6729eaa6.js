(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{580:function(e,a,t){"use strict";t.r(a);var n=t(5),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"实体类报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实体类报错"}},[e._v("#")]),e._v(" 实体类报错")]),e._v(" "),t("p",[e._v('com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.du.entity.User$HibernateProxy$bOI1IGY8["hibernateLazyInitializer"])')]),e._v(" "),t("blockquote",[t("p",[e._v("解决方法")])]),e._v(" "),t("p",[e._v("在pojo类上加上如下声明：")]),e._v(" "),t("p",[e._v('@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler","fieldHandler"})')]),e._v(" "),t("p",[e._v('@JsonIgnoreProperties(value={"hibernateLazyInitializer"})  （此时只是忽略hibernateLazyInitializer属性）要加载被lazy的，也就是many-to-one的one端的pojo上')]),e._v(" "),t("p",[e._v("这行代码的作用在于告诉你的jsonplug组件，在将你的代理对象转换为json对象时，忽略value对应的数组中的属性，即：")]),e._v(" "),t("p",[e._v("通过java的反射机制将pojo转换成json的，属性，(通过java的反射机制将pojo转换成json的，)")]),e._v(" "),t("p",[e._v('"hibernateLazyInitializer","handler","fieldHandler",（如果你想在转换的时候继续忽略其他属性，可以在数组中继续加入）')])])}),[],!1,null,null,null);a.default=r.exports}}]);